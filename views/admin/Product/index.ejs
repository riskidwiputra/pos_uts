<div class="container mt-4">
    <div class="row mb-3">
        <div class="col">
            <h2>Product Management</h2>
        </div>
        <div class="col text-end">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                <i class="fas fa-plus"></i> Add New Product
            </button>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <table id="productTable" class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% products.forEach(product => { %>
                    <tr>
                        <td><%= product.id %></td>
                        <td>
                            <img src="<% baseUrl %>/<%= product.image %>" width="100"
                                 class="product-image" 
                                 alt="<%= product.name %>">
                        </td>
                        <td><%= product.name %></td>
                        <td><%= formatCurrency(product.price) %></td>
                        <td>
                            <button class="btn btn-sm btn-primary" onclick="editProduct('<%= product.id %>')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteProduct('<%= product.id %>')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addProductForm" enctype="multipart/form-data" onSubmit="handleProduct(event)">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Product Name</label>
                        <input type="text" class="form-control" value="" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description"value="" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control"  value=""name="price" required>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Product Image</label>
                        <input type="file" class="form-control" name="image" accept="image/*">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Product Modal -->
<div class="modal fade" id="editProductModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editProductForm" enctype="multipart/form-data">
                <input type="hidden" name="id" id="editProductId">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Product Name</label>
                        <input type="text" class="form-control" name="name" id="editName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" id="editDescription" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" name="price" id="editPrice" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Product Image</label>
                        <input type="file" class="form-control" name="image" accept="image/*">
                        <div class="mt-2">
                            <img id="currentProductImage" src="" alt="Current product image" 
                                 style="max-width: 100px; display: none;">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Update Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Product Modal -->

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    
// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize DataTable
    const table = new DataTable('#productTable', {
        responsive: true,
        order: [[0, 'desc']]
    });


    const editProductForm = document.getElementById('editProductForm');
    editProductForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const productId = document.getElementById('editProductId').value;

        axios.put(`/api/products/${productId}`, formData)
        .then(function(response) {
            const editModal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
            editModal.hide();
            
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Product updated successfully!'
            }).then(() => {
                location.reload();
            });
        })
        .catch(function(error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.response?.data?.message || 'Error updating product'
            });
        });
    });
});

async function handleProduct(e) {
    try {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
            
        // Debug log
        console.log('FormData content:');
        for (let pair of formData.entries()) {
            console.log(pair[0], pair[1]);
        }
        
        const response = await axios.post('/api/products', formData);
        console.log('Response:', response.data);
        if (response.data.status === 'success') {
            const addModal = document.getElementById('addProductModal');
            const modal = bootstrap.Modal.getInstance(addModal);
            modal.hide();
            
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Product added successfully!'
            });
            
            window.location.reload();
        }
    } catch (error) {
        console.error('Error:', error);
        console.error('Response:', error.response?.data);
        
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response?.data?.message || 'Error adding product'
        });
    }
   
}
const addProductForm = document.getElementById('addProductForm');

function deleteProduct(productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            axios.delete(`/api/products/${productId}`)
            .then(function(response) {
                Swal.fire(
                    'Deleted!',
                    'Product has been deleted.',
                    'success'
                ).then(() => {
                    location.reload();
                });
            })
            .catch(function(error) {
                Swal.fire(
                    'Error!',
                    error.response?.data?.message || 'Error deleting product',
                    'error'
                );
            });
        }
    });
}

// View Product Function
function viewProduct(product) {
    axios.get(`/api/products/${product.id}`)
    .then(function(response) {
        const productData = response.data.data.product;
        
        document.getElementById('viewProductImage').src = productData.image_url || '/images/default-product.png';
        document.getElementById('viewName').textContent = productData.name;
        document.getElementById('viewDescription').textContent = productData.description;
        document.getElementById('viewPrice').textContent = formatCurrency(productData.price);
        document.getElementById('viewStock').textContent = productData.stock;
        document.getElementById('viewCategory').textContent = productData.category;
        document.getElementById('viewStatus').textContent = productData.status;
        
        const viewModal = new bootstrap.Modal(document.getElementById('viewProductModal'));
        viewModal.show();
    })
    .catch(function(error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response?.data?.message || 'Error loading product details'
        });
    });
}

// Edit Product Load Function
function editProduct(id) {
    console.log(id);
    axios.get(`/api/product/${id}`)
    .then(function(response) {
        const productData = response.data.data.product;
        
        document.getElementById('editProductId').value = productData.id;
        document.getElementById('editName').value = productData.name;
        document.getElementById('editDescription').value = productData.description;
        document.getElementById('editPrice').value = productData.price;

        
        const currentProductImage = document.getElementById('currentProductImage');
        if (productData.image) {
            currentProductImage.src = '<%= baseUrl %>'+"/"+productData.image;
            currentProductImage.style.display = 'block';
        } else {
            currentProductImage.style.display = 'none';
        }
        
        const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
        editModal.show();
    })
    .catch(function(error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response?.data?.message || 'Error loading product details'
        });
    });
}

// Currency Format Helper Function
function formatCurrency(amount) {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR'
    }).format(amount);
}
</script> 